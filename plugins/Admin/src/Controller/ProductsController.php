<?php
namespace Admin\Controller;

use Admin\Controller\AppController;
use Cake\Utility\Security;

/**
 * Products Controller
 *
 * @property \Admin\Model\Table\ProductsTable $Products
 *
 * @method \Admin\Model\Entity\Product[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ProductsController extends AppController
{

    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->set('title' ,'Products');
        $this->loadComponent('RequestHandler');



    }

    public function index()
    {
        $this->paginate = [
            'contain' => ['Categories'],
        ];
        $products = $this->paginate($this->Products);

        $this->set(compact('products'));

        if($this->request->is('Ajax')) //Ajax Detection
        {
            $this->autoRender = false; // Set Render False
            $this->response->body('Success');
            return $this->response;
        }


    }

    /**
     * View method
     *
     * @param string|null $id Product id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $product = $this->Products->get($id, [
            'contain' => ['Categories'],
        ]);

        $this->set('product', $product);

        if($this->request->is('Ajax')) //Ajax Detection
        {
            $this->autoRender = false; // Set Render False
            $this->response->body('Success');
            return $this->response;
        }
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $product = $this->Products->newEntity();
        if ($this->request->is('post')) {
            $product = $this->Products->patchEntity($product, $this->request->getData());

            $imgname = $this->request->getData()['img']['name'];
            $imgtmp = $this->request->getData()['img']['tmp_name'];
            $imgext = substr(strrchr($imgname, "."), 1);
            $imgpath = "upload/" . Security::hash($imgname) . date('Y-m-d-H-i-s') . "." . $imgext;

            $product->img_name = $imgname;
            $product->img_path = $imgpath;
            $product->isset = '1';

            if ($this->Products->save($product) and move_uploaded_file($imgtmp, WWW_ROOT . $imgpath) ) {

                $this->Flash->success(__('The product has been saved.'));

                return $this->redirect(['action' => 'index']);

            }
            $this->Flash->error(__('The product could not be saved. Please, try again.'));
        }
        $categories = $this->Products->Categories->find('list');

        $this->loadModel('Categories');
        $this->loadModel('Typecategories');
        $typecategories = $this->Categories->Typecategories->find('list')->where(['category_id'=> '']);

        $this->set(compact('product', 'categories','typecategories'));


//        if ($this->request->is('post')){
//            $a = 'ajax success';
//            echo $a;
//        }
//        if ($this->request->is('put')){
//            $a = 'ajax success';
//            echo $a;
//            echo exit;
//        }
//        if ($this->request->is('ajax')) {
//            $a = 'ajax success';
//            echo $a;
//            echo exit;
//
//        }
//        else{
//            echo $value = $this->request->getData('category_id');
//            echo $value;
//            $a = 'a';
//            echo $a;
//        }
//        if ($this->request->is('json')){
//            $a = 'ajax success';
//            echo $a;
//            echo exit;
//        }
////        $this->request->allowMethod('ajax');


//            $category_id =$this->request->getData('category_id');
//            debug($category_id);

    }

    /**
     * Edit method
     *
     * @param string|null $id Product id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $product = $this->Products->get($id, [
            'contain' => ['Categories'],
        ]);
        if ($this->request->is(['post', 'put'])) {

            $imgname = $this->request->getData()['img']['name'];
            $imgtmp = $this->request->getData()['img']['tmp_name'];
            $imgext = substr(strrchr($imgname, "."), 1);
            $imgpath = "upload/" . Security::hash($imgname) . date('Y-m-d-H-i-s') . "." . $imgext;

            $this->Products->patchEntity($product, $this->request->getData());


            if ($imgname != '') {
                $product->img_name = $imgname;
                $product->img_path = $imgpath;
                move_uploaded_file($imgtmp, WWW_ROOT . $imgpath);
            }

            if ($this->Products->save($product)) {
                return $this->redirect(['action' => 'index']);
                $product->modified = date('Y-m-d H:i:s');
            }
            $this->Flash->error(__('Ошибка обновления вашей статьи.'));
        }
        $categories = $this->Products->Categories->find('list', ['limit' => 200]);
        $this->set(compact('product', 'categories'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Product id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $product = $this->Products->get($id);
        if ($this->Products->delete($product)) {
            $this->Flash->success(__('The product has been deleted.'));
        } else {
            $this->Flash->error(__('The product could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }

}
