<?php
namespace Admin\Controller;

use Admin\Controller\AppController;
use Cake\ORM\TableRegistry;
use function React\Promise\all;

/**
 * TeamsUsers Controller
 *
 * @property \Admin\Model\Table\TeamsUsersTable $TeamsUsers
 *
 * @method \Admin\Model\Entity\TeamsUser[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class TeamsUsersController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->set('title' ,'Teams and Users');
        $this->loadComponent('RequestHandler');
    }
    public function index($id = null)
    {
        $this->paginate = [
            'contain' => ['Teams', 'Users'],
        ];
//        $teamsUsers = $this->TeamsUsers->find()->where(['team_id' => $id]);
        $teamsUsers = $this->paginate($this->TeamsUsers->find('all')->where(['team_id'=> $id]));
//
        $this->set(compact('teamsUsers'));
        $this->set('id',$id);
//        $teamsUser = $this->TeamsUsers->get($id, [
//            'contain' => ['Teams', 'Users'],
//        ]);
//        $this->set('teamsUser', $teamsUser);

    }

    /**
     * View method
     *
     * @param string|null $id Teams User id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $teamsUser = $this->TeamsUsers->get($id, [
            'contain' => ['Teams', 'Users'],
        ]);

        $this->set('teamsUser', $teamsUser);
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add($id = null)
    {
        $teamsUser = $this->TeamsUsers->newEntity();
        if ($this->request->is('post')) {
            $teamsUser = $this->TeamsUsers->patchEntity($teamsUser, $this->request->getData());
            $query = $this->request->getData('email');
            $user_id = $this->TeamsUsers->Users->find()->select('id')->where(['email'=> $query]);
            $teamsUser->user_id = $user_id;
            if ($this->TeamsUsers->save($teamsUser)) {
                $this->Flash->success(__('The teams user has been saved.'));

//                return $this->redirect(['action' => 'index']);
            }
//            $this->Flash->error(__('The teams user could not be saved. Please, try again.'));
        }
//        $this->paginate = [
//            'contain' => ['Teams', 'Users'],
//        ];
        $teams = $this->TeamsUsers->Teams->find('list', ['limit' => 200])->where(['user_id'=>$this->Auth->user('id')]);
        $users = $this->TeamsUsers->Users->find('list', ['limit' => 200]);
        $this->set(compact('teamsUser', 'teams', 'users'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Teams User id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $teamsUser = $this->TeamsUsers->get($id, [
            'contain' =>  ['Teams', 'Users'],
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $teamsUser = $this->TeamsUsers->patchEntity($teamsUser, $this->request->getData());
            $teamsUser->role = $this->request->getData('role');
            $teamid = $this->request->getData('team_id');
            if ($this->TeamsUsers->save($teamsUser)) {
                $this->Flash->success(__('The teams user has been saved.'));
                return $this->redirect(['controller'=>'TeamsUsers','action'=>'index',$teamid]);
            }
            $this->Flash->error(__('The teams user could not be saved. Please, try again.'));
        }
        $teams = $this->TeamsUsers->Teams->find('list', ['limit' => 200])->where([]);
        $this->set(compact('teamsUser', 'teams'));

    }

    /**
     * Delete method
     *
     * @param string|null $id Teams User id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $teamsUser = $this->TeamsUsers->get($id);
        if ($this->TeamsUsers->delete($teamsUser)) {
            $this->Flash->success(__('The teams user has been deleted.'));
        } else {
            $this->Flash->error(__('The teams user could not be deleted. Please, try again.'));
        }

        return $this->redirect($this->referer());
    }

    public function search($id = null)
    {
        $this->loadModel('Users');
        $keyword = $this->request->getQuery('keyword');

        $query = $this->TeamsUsers->Users->find('all', [
            'conditions' => ['email' => $keyword]
        ]);

        $this->set('keyword', $keyword);
        $this->set('users', $query);

        $this->viewBuilder()->setLayout('');

    }
    public function invite(){
        $userId = $this->Auth->user('id');
        $teamsusers = $this->TeamsUsers->find()->where(['user_id' => $userId,'verified'=>'0']);

//        $invites = $this->TeamsUsers->Teams->find('all')->;

        $this->set(compact('userId','teamsusers'));

    }
    public function accept($id = null){
        $teamsUser = $this->TeamsUsers->get($id, [
            'contain' =>  ['Teams', 'Users'],
        ]);

        if ($this->request->is(['patch', 'post', 'put'])) {
            $teamsUser = $this->TeamsUsers->patchEntity($teamsUser, $this->request->getData());
            $teamsUser->verified = '1';
            if ($this->TeamsUsers->save($teamsUser)) {
                $this->Flash->success(__('The teams user has been saved.'));

                return $this->redirect(['action' => 'invite']);
            }
            $this->Flash->error(__('The teams user could not be saved. Please, try again.'));
        }
        $teams = $this->TeamsUsers->Teams->find('list', ['limit' => 200])->where([]);
        $this->set(compact('teamsUser', 'teams'));
    }
    public function decline($id = null){
        $this->request->allowMethod(['post', 'delete']);
        $teamsUser = $this->TeamsUsers->get($id);
        if ($this->TeamsUsers->delete($teamsUser)) {
            $this->Flash->success(__('The teams user has been deleted.'));
        } else {
            $this->Flash->error(__('The teams user could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'invite']);
    }

}
