<?php
namespace Admin\Controller;

use Admin\Controller\AppController;
use Cake\I18n\Time;

/**
 * Shifts Controller
 *
 * @property \Admin\Model\Table\ShiftsTable $Shifts
 *
 * @method \Admin\Model\Entity\Shift[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ShiftsController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->set('title' ,'Shifts');
        $this->loadComponent('RequestHandler');
    }
    public function index()
    {
        $this->paginate = [
            'contain' => ['Users'],
        ];
        $shifts = $this->paginate($this->Shifts);

        $this->set(compact('shifts'));
        $statuses = $this->Shifts->find('all')->where(['user_id'=> $this->Auth->user('id')])->last();
        if (isset($statuses)){
            $status = $statuses->status;
            $this->set('status',$status);
        }


//
//        if ($status == '1'){
//
//        }
//        $now = Time::now()->format('Y-m-d H:i:s');
//        $start = Time::now()->format('Y-m-d H:i:s');
//        $this->set(compact('now'));
//
//        $now = Time::now()->format('d H:i:s');
//        $start = Time::now()->format('d H:i:s');
//
//
//        $timer = $now - $start;
//        $this->set(compact('timer'));

    }

    /**
     * View method
     *
     * @param string|null $id Shift id.
     * @return \Cake\Http\Response|null
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $shift = $this->Shifts->get($id, [
            'contain' => ['Users'],
        ]);
        $this->set('shift', $shift);

    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null Redirects on successful add, renders view otherwise.
     */
    public function add()
    {

        if ($this->request->is('get')) {
            $time = $this->request->getQuery('time');
            $shift = $this->Shifts->newEntity();
            $shift = $this->Shifts->patchEntity($shift, $this->request->getData());
            $shift->user_id = $this->Auth->user('id');
            $shift->time = $time;

            if ($this->Shifts->save($shift)) {
                $this->Flash->success(__('The shift has been saved.'));

//                return $this->redirect(['action' => 'index']);
            }
//            $this->Flash->error(__('The shift could not be saved. Please, try again.'));
        }
        $users = $this->Shifts->Users->find('list', ['limit' => 200]);
        $this->set(compact('shift', 'users'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Shift id.
     * @return \Cake\Http\Response|null Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $shift = $this->Shifts->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $shift = $this->Shifts->patchEntity($shift, $this->request->getData());
            if ($this->Shifts->save($shift)) {
                $this->Flash->success(__('The shift has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The shift could not be saved. Please, try again.'));
        }
        $users = $this->Shifts->Users->find('list', ['limit' => 200]);
        $this->set(compact('shift', 'users'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Shift id.
     * @return \Cake\Http\Response|null Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $shift = $this->Shifts->get($id);
        if ($this->Shifts->delete($shift)) {
            $this->Flash->success(__('The shift has been deleted.'));
        } else {
            $this->Flash->error(__('The shift could not be deleted. Please, try again.'));
        }

        return $this->redirect(['action' => 'index']);
    }
    public function start(){
        if ($this->request->is('post')) {
//            $time = $this->request->getQuery('time');
            $shift = $this->Shifts->newEntity();
            $shift = $this->Shifts->patchEntity($shift, $this->request->getData());
            $shift->user_id = $this->Auth->user('id');
            $shift->time = '0';
            $shift->status = '0';

            if ($this->Shifts->save($shift)) {

                $this->Flash->success(__('The shift has been saved.'));
//                return $this->redirect(['action' => 'index']);


            }
//            $this->Flash->error(__('The shift could not be saved. Please, try again.'));
        }
        $users = $this->Shifts->Users->find('list', ['limit' => 200]);
        $this->set(compact('shift', 'users'));

    }
    public function finish(){
        $qa = $this->Shifts->find('all')->where(['user_id'=>$this->Auth->user('id')])->last();
        $q = $qa->id;
        $this->set('q',$q);
        $shift = $this->Shifts->get($q, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $shift = $this->Shifts->patchEntity($shift, $this->request->getData());
            $shift->time = $this->request->getData('time');
            $shift->status = '1';
            if ($this->Shifts->save($shift)) {
                $this->Flash->success(__('The shift has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The shift could not be saved. Please, try again.'));
        }
        $users = $this->Shifts->Users->find('list', ['limit' => 200]);
        $this->set(compact('shift', 'users'));
    }
}
